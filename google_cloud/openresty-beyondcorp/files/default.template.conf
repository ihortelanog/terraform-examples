error_log /dev/stderr debug;
proxy_cache_path /tmp/cache keys_zone=tokens:10m;

server {
    listen       8080;
    server_name  localhost;

    # Insist on https access
    # This max-age should be *large* but its a little risky to deploy 
    # with a long duration without testing first
    add_header Strict-Transport-Security "max-age=600; includeSubDomains" always;

    location /login {
        default_type "text/html";
        root /assets;
    }

    # Example of anonymous access by fetching a token automatically
    location /anonymous { 
         # Anonymous access
         access_by_lua_block {
             local upstreamtoken = ngx.location.capture('/token').body
             ngx.req.set_header("Authorization", "Bearer " .. upstreamtoken)
         }

         proxy_set_header X-Real-IP $remote_addr;
         proxy_pass ${UPSTREAM_URL};
    }

    # Proxy all request upstream. Redirect to Google Signin and only allow
    # users from AUTHORIZED_DOMAIN in.
    location / {
        # Caller should provide a cookie IDTOKEN containing an identity_token
        # If its valid, we exchange for the server's identity_token and proxy
        # to upstream
        rewrite_by_lua_block {
            -- Check IDTOKEN cookie present
            if ngx.var.cookie_IDTOKEN == nil then
                ngx.log(ngx.WARN, "No IDTOKEN cookie present") 
                return ngx.redirect("/login?returnurl=" .. ngx.var.request_uri, 302)
            end
            
            -- Verify IDTOKEN token and obtain a server identity token
            local verification, upstreamtoken = ngx.location.capture_multi {
                { '/tokeninfo', { args = { id_token = ngx.var.cookie_IDTOKEN}}},
                { '/token'}
            }
            
            -- Check token verified ok
            if verification.status ~= 200 then
                ngx.log(ngx.WARN, "Invalid status: " .. verification.status) 
                return ngx.redirect("/login?returnurl=" .. ngx.var.request_uri, 302)
            end
        
            -- Decode Googles tokeinfo response
            local cjson = require "cjson"
            local tokeninfo = cjson.decode(verification.body)

            -- Check audience is our Oauth client, not some random one
            if tokeninfo.aud ~= "${OAUTH_CLIENT_ID}" then
                ngx.log(ngx.WARN, "Invalid aud: " .. tokeninfo.aud) 
                return ngx.redirect("/login?returnurl=" .. ngx.var.request_uri, 302)
            end

            -- Check the user has a verified email is in the domain we want to allow
            -- And that their email address ends in @<AUTHERIZED_DOMAIN>
            local ending = "@" .. "${AUTHORIZED_DOMAIN}"
            if tokeninfo.email_verified ~= "true" or
               not tokeninfo.email:find(ending, -ending:len()) then
                ngx.log(ngx.WARN, "Not a domain user")
                return ngx.redirect("/login?returnurl=" .. ngx.var.request_uri, 302)
            end

            -- Indicate this request is autherized for upstream
            ngx.req.set_header("Authorization", "Bearer " .. upstreamtoken.body)
        }
        proxy_set_header X-Real-IP $remote_addr;
        proxy_pass ${UPSTREAM_URL};
    }

    location /token {
        internal; # Security! don't expose to outside world!
        # Avoid requesting a token every inbound request through caching
        proxy_cache tokens;
        proxy_cache_valid 200 5m; # 5 min cache of token
        proxy_set_header Metadata-Flavor "Google";
        proxy_pass http://metadata.google.internal/computeMetadata/v1/instance/service-accounts/default/identity?audience=${UPSTREAM_URL};
    }

    location /tokeninfo {
        internal; # No need to expose
        # Avoid requesting a tokeninfo every inbound request through caching
        proxy_cache tokens;
        proxy_cache_valid 200 1m; 

        # Ideally we would proxy to the oauth2 address but it breaks for an unknown reason
        # Something to do with SSL ??? 
        # proxy_pass https://oauth2.googleapis.com/tokeninfo;

        # So this is our workaround, we do an internal http redirect instead
        proxy_pass http://127.0.0.1:8080/httptokeninfo;
    }

    location /httptokeninfo {
        # internal; # Would be better not to expose but its 'ok', its a public endpoint anyway
        # Google Public DNS is simplest to configure
        resolver 8.8.8.8; 
        content_by_lua_block {
            local http = require "resty.http"
            local httpc = http.new()
            local res, err = httpc:request_uri(
                "https://oauth2.googleapis.com/tokeninfo?id_token=" .. ngx.var.arg_id_token,
                { ssl_verify = false }
            )
            if not res then
                ngx.say("failed to request: ", err)
                return
            end
            ngx.status = res.status
            ngx.say(res.body)
        }
    }

    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
        root   /usr/local/openresty/nginx/html;
    }
}
